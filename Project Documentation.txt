Project Documentation: Movie Search System with Statistics and Logging
1. General Architecture
The project is composed of the following main modules:

main.py – main user interface, menu logic, calls to search, display, and statistics functions.

sql_connector.py – MySQL connection module, handles movie searches by various criteria.

formatter.py – formats search results in a table with aligned columns and continuous artificial numbering.

log_writer.py – writes search logs into MongoDB.

log_stats.py – retrieves aggregated search statistics from MongoDB.

2. Operation Flow
2.1 Main Menu (main.py)
User can choose:

Search by keyword

Search by year or year interval

Search by genre

View search statistics

Exit

2.2 Search (Cases 1, 2, 3)
User enters the search parameters.

Results are displayed in a numbered table with continuous numbering across pages.

Pagination: 10 results per page, with "y"/"n" input validation for "show more results".

In Case 3, after pagination ends, the list of genres is re-shown for convenience.

2.3 Statistics (Case 4)
Shows Top 5 searches by:

keyword

year

year interval

genre

Data aggregated from MongoDB logs.

3. Module Details
sql_connector.py
Connects to MySQL and retrieves movies:

find_by_key_word()

get_films_by_year()

get_films_by_years_interval()

find_films_by_genres()

Always returns (film_id, title, description, release_year).

get_genres() lists all genres from the DB.

formatter.py
print_table_results() — prints aligned table with start_index to enable continuous numbering.

log_writer.py
Connects to MongoDB and logs searches via log_query().

Closes connection with close_mongo().

log_stats.py
run_aggregation() executes MongoDB aggregations.

Returns top 5 searches by each criterion.

4. Example Output (search by genre)
text
#  | Title               | Description                  | Release Year
---+---------------------+------------------------------+--------------
1  | ALASKA PHANTOM      | A suspenseful musical drama  | 2023
...
10 | CLONES PINOCCHIO    | Fantasy adventure            | 1993
After "y":

text
11 | COLORADO HOLOCAUST  | Historical epic              | 2021
...


5. Notes
Continuous numbering makes navigation across pages easy.

Input validation ensures robust user flow.

Logging to MongoDB enables meaningful statistics.

Modular structure makes it easy to extend the system.
